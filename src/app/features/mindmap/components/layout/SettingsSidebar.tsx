import React, { useEffect } from 'react';
import { useMindMapStore } from '../../../../core/store/mindMapStore';

interface SettingsSidebarProps {
  // Êó¢Â≠ò„ÅÆpropsÔºàÂæåÊñπ‰∫íÊèõÊÄß„ÅÆ„Åü„ÇÅ‰øùÊåÅÔºâ
  storageMode?: 'local' | 'cloud';
  onStorageModeChange?: (mode: 'local' | 'cloud') => void;
  onShowKeyboardHelper?: () => void;
  onAutoLayout?: () => void;
  onExport?: () => void;
  onImport?: () => void;
}

const SettingsSidebar: React.FC<SettingsSidebarProps> = ({
  storageMode,
  onStorageModeChange,
  onShowKeyboardHelper,
  onAutoLayout,
  onExport,
  onImport
}) => {
  const { settings, updateSetting, loadSettingsFromStorage } = useMindMapStore();

  // ÂàùÂõû„É≠„Éº„ÉâÊôÇ„Å´Ë®≠ÂÆö„ÇílocalStorage„Åã„ÇâË™≠„ÅøËæº„Åø
  useEffect(() => {
    loadSettingsFromStorage();
  }, [loadSettingsFromStorage]);

  const handleSettingChange = <K extends keyof typeof settings>(key: K, value: typeof settings[K]) => {
    updateSetting(key, value);
  };

  return (
    <div className="settings-sidebar">


      <div className="settings-section">
        <h3 className="settings-section-title">„ÉÜ„Éº„Éû</h3>
        <div className="settings-section-content">
          <div className="settings-radio-group">
            <label className="settings-radio-option">
              <input
                type="radio"
                name="theme"
                value="dark"
                checked={settings.theme === 'dark'}
                onChange={() => handleSettingChange('theme', 'dark')}
              />
              <span className="settings-radio-label">
                <span className="settings-icon">üåô</span>
                „ÉÄ„Éº„ÇØ
              </span>
            </label>
            <label className="settings-radio-option">
              <input
                type="radio"
                name="theme"
                value="light"
                checked={settings.theme === 'light'}
                onChange={() => handleSettingChange('theme', 'light')}
              />
              <span className="settings-radio-label">
                <span className="settings-icon">‚òÄÔ∏è</span>
                „É©„Ç§„Éà
              </span>
            </label>
          </div>
        </div>
      </div>

      <div className="settings-section">
        <h3 className="settings-section-title">„Éï„Ç©„É≥„ÉàË®≠ÂÆö</h3>
        <div className="settings-section-content">
          <div className="settings-input-group">
            <label className="settings-input-label">„Éï„Ç©„É≥„Éà„Çµ„Ç§„Ç∫</label>
            <input
              type="number"
              min="10"
              max="24"
              value={settings.fontSize}
              onChange={(e) => handleSettingChange('fontSize', parseInt(e.target.value))}
              className="settings-input"
            />
          </div>
          <div className="settings-input-group">
            <label className="settings-input-label">„Éï„Ç©„É≥„Éà„Éï„Ç°„Éü„É™„Éº</label>
            <select
              value={settings.fontFamily}
              onChange={(e) => handleSettingChange('fontFamily', e.target.value)}
              className="settings-select"
            >
              <option value="system-ui">System UI</option>
              <option value="Arial">Arial</option>
              <option value="Helvetica">Helvetica</option>
              <option value="sans-serif">Sans Serif</option>
              <option value="serif">Serif</option>
            </select>
          </div>
        </div>
      </div>


      <div className="settings-section">
        <h3 className="settings-section-title">„Çπ„Éà„É¨„Éº„Ç∏„É¢„Éº„Éâ</h3>
        <div className="settings-section-content">
          <div className="settings-radio-group">
            <label className="settings-radio-option">
              <input
                type="radio"
                name="storageMode"
                value="local"
                checked={storageMode === 'local'}
                onChange={() => onStorageModeChange?.('local')}
              />
              <span className="settings-radio-label">
                <span className="settings-icon">üíæ</span>
                „É≠„Éº„Ç´„É´
              </span>
            </label>
            <label className="settings-radio-option">
              <input
                type="radio"
                name="storageMode"
                value="cloud"
                checked={storageMode === 'cloud'}
                onChange={() => onStorageModeChange?.('cloud')}
              />
              <span className="settings-radio-label">
                <span className="settings-icon">‚òÅÔ∏è</span>
                „ÇØ„É©„Ç¶„Éâ
              </span>
            </label>
          </div>
        </div>
      </div>

      <div className="settings-section">
        <h3 className="settings-section-title">„Åù„ÅÆ‰ªñ</h3>
        <div className="settings-section-content">
          <div className="settings-action-group">
            {onAutoLayout && (
              <button 
                className="settings-button"
                onClick={onAutoLayout}
              >
                <span className="settings-button-icon">üìê</span>
                Ëá™ÂãïÊï¥Âàó
              </button>
            )}
            {onShowKeyboardHelper && (
              <button 
                className="settings-button"
                onClick={onShowKeyboardHelper}
              >
                <span className="settings-button-icon">‚å®Ô∏è</span>
                „Ç≠„Éº„Éú„Éº„Éâ„Ç∑„Éß„Éº„Éà„Ç´„ÉÉ„Éà
              </button>
            )}
          </div>
        </div>
      </div>

      <style>{`
        .settings-sidebar {
          padding: 16px;
          overflow-y: auto;
          background-color: var(--bg-primary);
        }

        .settings-section {
          margin-bottom: 24px;
        }

        .settings-section-title {
          font-size: 12px;
          font-weight: 600;
          color: var(--text-secondary);
          text-transform: uppercase;
          letter-spacing: 0.5px;
          margin: 0 0 12px 0;
          padding-bottom: 8px;
          border-bottom: 1px solid var(--border-color);
        }

        .settings-section-content {
          display: flex;
          flex-direction: column;
          gap: 12px;
        }

        .settings-toggle {
          display: flex;
          align-items: center;
          cursor: pointer;
          padding: 4px 0;
        }

        .settings-toggle input[type="checkbox"] {
          margin-right: 8px;
          accent-color: #007acc;
        }

        .settings-toggle-label {
          color: var(--text-primary);
          font-size: 14px;
        }

        .settings-input-group {
          display: flex;
          flex-direction: column;
          gap: 4px;
        }

        .settings-input-label {
          font-size: 12px;
          color: var(--text-secondary);
          font-weight: 500;
        }

        .settings-input,
        .settings-select {
          padding: 6px 8px;
          border: 1px solid var(--border-color);
          border-radius: 4px;
          background: var(--bg-primary);
          color: var(--text-primary);
          font-size: 14px;
        }

        .settings-input:focus,
        .settings-select:focus {
          outline: none;
          border-color: var(--accent-color);
        }

        .settings-color-input {
          padding: 4px;
          border: 1px solid var(--border-color);
          border-radius: 4px;
          background: var(--bg-primary);
          cursor: pointer;
          width: 60px;
          height: 32px;
        }

        .settings-radio-group {
          display: flex;
          flex-direction: column;
          gap: 8px;
        }

        .settings-radio-option {
          display: flex;
          align-items: center;
          padding: 8px;
          border-radius: 4px;
          cursor: pointer;
          transition: background-color 0.2s;
        }

        .settings-radio-option:hover {
          background-color: var(--hover-color);
        }

        .settings-radio-option input[type="radio"] {
          margin-right: 8px;
          accent-color: var(--accent-color);
        }

        .settings-radio-label {
          display: flex;
          align-items: center;
          color: var(--text-primary);
          font-size: 14px;
        }

        .settings-icon {
          margin-right: 8px;
        }

        .settings-button {
          display: flex;
          align-items: center;
          padding: 8px 12px;
          background: none;
          border: 1px solid var(--border-color);
          border-radius: 4px;
          color: var(--text-primary);
          cursor: pointer;
          transition: all 0.2s;
          font-size: 14px;
        }

        .settings-button:hover {
          background-color: var(--hover-color);
          border-color: var(--accent-color);
          color: var(--text-primary);
        }

        .settings-button-icon {
          margin-right: 8px;
        }

        .settings-action-group {
          display: flex;
          flex-direction: column;
          gap: 8px;
        }
      `}</style>
    </div>
  );
};

export default SettingsSidebar;