// „É™„Ç¢„É´„Çø„Ç§„É†ÂêåÊúü„Ç∑„Çπ„ÉÜ„É† - Êìç‰Ωú„Éô„Éº„Çπ„ÅÆÂç≥Â∫ßDBÂèçÊò†
import { getAppSettings } from './storage.js';
import { authManager } from './authManager.js';

class RealtimeSync {
  constructor() {
    this.isEnabled = false;
    this.baseUrl = '';
    this.pendingOperations = new Map(); // Â§±ÊïóÊôÇ„ÅÆ„É™„Éà„É©„Ç§Áî®
  }

  // ÂàùÊúüÂåñ
  initialize() {
    const settings = getAppSettings();
    this.isEnabled = settings.storageMode === 'cloud' && authManager.isAuthenticated();
    
    if (this.isEnabled) {
      // Ê≠£„Åó„ÅÑAPI„Ç®„É≥„Éâ„Éù„Ç§„É≥„Éà„Çí‰ΩøÁî®
      this.baseUrl = window.location.hostname === 'localhost' 
        ? 'http://localhost:8787/api' 
        : 'https://mindflow-api-production.shigekazukoya.workers.dev/api';
      
      console.log('üîÑ „É™„Ç¢„É´„Çø„Ç§„É†ÂêåÊúü„ÇíÊúâÂäπÂåñ:', this.baseUrl);
    } else {
      console.log('üè† „É≠„Éº„Ç´„É´„É¢„Éº„Éâ or Êú™Ë™çË®º: „É™„Ç¢„É´„Çø„Ç§„É†ÂêåÊúü„ÅØÁÑ°Âäπ');
      console.log('  - „Çπ„Éà„É¨„Éº„Ç∏„É¢„Éº„Éâ:', settings.storageMode);
      console.log('  - Ë™çË®ºÁä∂ÊÖã:', authManager.isAuthenticated());
    }
  }

  // Ë™çË®ºÁä∂ÊÖãÂ§âÊõ¥ÊôÇ„ÅÆÂÜçÂàùÊúüÂåñ
  reinitialize() {
    console.log('üîÑ „É™„Ç¢„É´„Çø„Ç§„É†ÂêåÊúü„ÅÆÂÜçÂàùÊúüÂåñ');
    this.initialize();
  }

  // Ë™çË®º„Éò„ÉÉ„ÉÄ„Éº„ÇíÂèñÂæó
  getAuthHeaders() {
    if (!authManager.isAuthenticated()) {
      throw new Error('Ë™çË®º„ÅåÂøÖË¶Å„Åß„Åô');
    }

    return {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${authManager.getAuthToken()}`,
      'X-User-ID': authManager.getCurrentUser()?.email || 'unknown'
    };
  }

  // === „Éé„Éº„ÉâÊìç‰Ωú ===

  // „Éé„Éº„ÉâËøΩÂä†„ÅÆÂç≥Â∫ßÂèçÊò†
  async addNode(mapId, nodeData, parentId = null) {
    if (!this.isEnabled) return { success: true, local: true };

    try {
      console.log('üÜï „Éé„Éº„ÉâËøΩÂä†„ÇíDBÂèçÊò†:', nodeData.id, nodeData.text);
      
      const response = await fetch(`${this.baseUrl}/nodes`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify({
          mapId,
          node: nodeData,
          parentId,
          operation: 'add'
        })
      });

      if (!response.ok) {
        throw new Error(`„Éé„Éº„ÉâËøΩÂä†Â§±Êïó: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ „Éé„Éº„ÉâËøΩÂä†ÊàêÂäü:', result);
      return { success: true, result };

    } catch (error) {
      console.error('‚ùå „Éé„Éº„ÉâËøΩÂä†„Ç®„É©„Éº:', error);
      // Â§±Êïó„Åó„ÅüÊìç‰Ωú„Çí„Ç≠„É•„Éº„Å´ËøΩÂä†ÔºàÂæå„Åß„É™„Éà„É©„Ç§Ôºâ
      this.pendingOperations.set(`add_${nodeData.id}`, {
        type: 'add',
        mapId,
        nodeData,
        parentId,
        timestamp: Date.now()
      });
      return { success: false, error: error.message };
    }
  }

  // „Éé„Éº„ÉâÊõ¥Êñ∞„ÅÆÂç≥Â∫ßÂèçÊò†
  async updateNode(mapId, nodeId, updates) {
    if (!this.isEnabled) return { success: true, local: true };

    try {
      console.log('üìù „Éé„Éº„ÉâÊõ¥Êñ∞„ÇíDBÂèçÊò†:', nodeId, updates);
      
      const response = await fetch(`${this.baseUrl}/nodes/${nodeId}`, {
        method: 'PUT',
        headers: this.getAuthHeaders(),
        body: JSON.stringify({
          mapId,
          updates,
          operation: 'update'
        })
      });

      if (!response.ok) {
        throw new Error(`„Éé„Éº„ÉâÊõ¥Êñ∞Â§±Êïó: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ „Éé„Éº„ÉâÊõ¥Êñ∞ÊàêÂäü:', result);
      return { success: true, result };

    } catch (error) {
      console.error('‚ùå „Éé„Éº„ÉâÊõ¥Êñ∞„Ç®„É©„Éº:', error);
      this.pendingOperations.set(`update_${nodeId}`, {
        type: 'update',
        mapId,
        nodeId,
        updates,
        timestamp: Date.now()
      });
      return { success: false, error: error.message };
    }
  }

  // „Éé„Éº„ÉâÂâäÈô§„ÅÆÂç≥Â∫ßÂèçÊò†
  async deleteNode(mapId, nodeId) {
    if (!this.isEnabled) return { success: true, local: true };

    try {
      console.log('üóëÔ∏è „Éé„Éº„ÉâÂâäÈô§„ÇíDBÂèçÊò†:', nodeId);
      
      const response = await fetch(`${this.baseUrl}/nodes/${nodeId}`, {
        method: 'DELETE',
        headers: this.getAuthHeaders(),
        body: JSON.stringify({
          mapId,
          operation: 'delete'
        })
      });

      if (!response.ok) {
        throw new Error(`„Éé„Éº„ÉâÂâäÈô§Â§±Êïó: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ „Éé„Éº„ÉâÂâäÈô§ÊàêÂäü:', result);
      return { success: true, result };

    } catch (error) {
      console.error('‚ùå „Éé„Éº„ÉâÂâäÈô§„Ç®„É©„Éº:', error);
      this.pendingOperations.set(`delete_${nodeId}`, {
        type: 'delete',
        mapId,
        nodeId,
        timestamp: Date.now()
      });
      return { success: false, error: error.message };
    }
  }

  // „Éé„Éº„ÉâÁßªÂãïÔºàË¶™Â§âÊõ¥Ôºâ„ÅÆÂç≥Â∫ßÂèçÊò†
  async moveNode(mapId, nodeId, newParentId) {
    if (!this.isEnabled) return { success: true, local: true };

    try {
      console.log('üîÑ „Éé„Éº„ÉâÁßªÂãï„ÇíDBÂèçÊò†:', nodeId, '->', newParentId);
      
      const response = await fetch(`${this.baseUrl}/nodes/${nodeId}/move`, {
        method: 'PUT',
        headers: this.getAuthHeaders(),
        body: JSON.stringify({
          mapId,
          newParentId,
          operation: 'move'
        })
      });

      if (!response.ok) {
        throw new Error(`„Éé„Éº„ÉâÁßªÂãïÂ§±Êïó: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ „Éé„Éº„ÉâÁßªÂãïÊàêÂäü:', result);
      return { success: true, result };

    } catch (error) {
      console.error('‚ùå „Éé„Éº„ÉâÁßªÂãï„Ç®„É©„Éº:', error);
      this.pendingOperations.set(`move_${nodeId}`, {
        type: 'move',
        mapId,
        nodeId,
        newParentId,
        timestamp: Date.now()
      });
      return { success: false, error: error.message };
    }
  }

  // === „Éû„ÉÉ„ÉóÊìç‰Ωú ===

  // „Éû„ÉÉ„ÉóË™≠„ÅøÂèñ„ÇäÔºàÁ¥îÁ≤ã„Å™ÂèñÂæóÊìç‰ΩúÔºâ
  async loadMap(mapId) {
    if (!this.isEnabled) {
      throw new Error('„ÇØ„É©„Ç¶„Éâ„É¢„Éº„Éâ„ÅåÁÑ°Âäπ„Åß„Åô');
    }

    try {
      console.log('üìñ „Éû„ÉÉ„ÉóË™≠„ÅøÂèñ„Çä:', mapId);
      
      const response = await fetch(`${this.baseUrl}/mindmaps/${mapId}`, {
        method: 'GET',
        headers: this.getAuthHeaders()
      });

      if (!response.ok) {
        throw new Error(`„Éû„ÉÉ„ÉóË™≠„ÅøÂèñ„ÇäÂ§±Êïó: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ „Éû„ÉÉ„ÉóË™≠„ÅøÂèñ„ÇäÊàêÂäü:', result.title);
      return result;

    } catch (error) {
      console.error('‚ùå „Éû„ÉÉ„ÉóË™≠„ÅøÂèñ„Çä„Ç®„É©„Éº:', error);
      throw error;
    }
  }

  // „Éû„ÉÉ„Éó‰∏ÄË¶ßÂèñÂæóÔºàÂü∫Êú¨ÊÉÖÂ†±„ÅÆ„ÅøÔºâ
  async loadMapList() {
    if (!this.isEnabled) {
      throw new Error('„ÇØ„É©„Ç¶„Éâ„É¢„Éº„Éâ„ÅåÁÑ°Âäπ„Åß„Åô');
    }

    try {
      console.log('üìã „Éû„ÉÉ„Éó‰∏ÄË¶ßÂèñÂæó');
      
      const response = await fetch(`${this.baseUrl}/mindmaps`, {
        method: 'GET',
        headers: this.getAuthHeaders()
      });

      if (!response.ok) {
        throw new Error(`„Éû„ÉÉ„Éó‰∏ÄË¶ßÂèñÂæóÂ§±Êïó: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ „Éû„ÉÉ„Éó‰∏ÄË¶ßÂèñÂæóÊàêÂäü:', result.mindmaps?.length || 0, '‰ª∂');
      return result.mindmaps || [];

    } catch (error) {
      console.error('‚ùå „Éû„ÉÉ„Éó‰∏ÄË¶ßÂèñÂæó„Ç®„É©„Éº:', error);
      throw error;
    }
  }

  // „Éû„ÉÉ„Éó‰ΩúÊàê
  async createMap(mapData) {
    if (!this.isEnabled) return { success: true, local: true };

    try {
      console.log('üÜï „Éû„ÉÉ„Éó‰ΩúÊàê„ÇíDBÂèçÊò†:', mapData.title);
      
      const response = await fetch(`${this.baseUrl}/mindmaps`, {
        method: 'POST',
        headers: this.getAuthHeaders(),
        body: JSON.stringify(mapData)
      });

      if (!response.ok) {
        throw new Error(`„Éû„ÉÉ„Éó‰ΩúÊàêÂ§±Êïó: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ „Éû„ÉÉ„Éó‰ΩúÊàêÊàêÂäü:', result);
      return { success: true, result };

    } catch (error) {
      console.error('‚ùå „Éû„ÉÉ„Éó‰ΩúÊàê„Ç®„É©„Éº:', error);
      return { success: false, error: error.message };
    }
  }

  // „Éû„ÉÉ„ÉóÂâäÈô§
  async deleteMap(mapId) {
    if (!this.isEnabled) return { success: true, local: true };

    try {
      console.log('üóëÔ∏è „Éû„ÉÉ„ÉóÂâäÈô§„ÇíDBÂèçÊò†:', mapId);
      
      const response = await fetch(`${this.baseUrl}/mindmaps/${mapId}`, {
        method: 'DELETE',
        headers: this.getAuthHeaders()
      });

      if (!response.ok) {
        throw new Error(`„Éû„ÉÉ„ÉóÂâäÈô§Â§±Êïó: ${response.status}`);
      }

      const result = await response.json();
      console.log('‚úÖ „Éû„ÉÉ„ÉóÂâäÈô§ÊàêÂäü:', result);
      return { success: true, result };

    } catch (error) {
      console.error('‚ùå „Éû„ÉÉ„ÉóÂâäÈô§„Ç®„É©„Éº:', error);
      return { success: false, error: error.message };
    }
  }

  // === „É™„Éà„É©„Ç§Ê©üËÉΩ ===

  // Â§±Êïó„Åó„ÅüÊìç‰Ωú„ÅÆ„É™„Éà„É©„Ç§
  async retryPendingOperations() {
    if (this.pendingOperations.size === 0) return;

    console.log('üîÑ Â§±ÊïóÊìç‰Ωú„ÅÆ„É™„Éà„É©„Ç§ÈñãÂßã:', this.pendingOperations.size, '‰ª∂');

    for (const [key, operation] of this.pendingOperations.entries()) {
      try {
        // Âè§„ÅÑÊìç‰ΩúÔºà5ÂàÜ‰ª•‰∏äÂâçÔºâ„ÅØÁ†¥Ê£Ñ
        if (Date.now() - operation.timestamp > 5 * 60 * 1000) {
          console.log('‚è∞ Âè§„ÅÑÊìç‰Ωú„ÇíÁ†¥Ê£Ñ:', key);
          this.pendingOperations.delete(key);
          continue;
        }

        let result;
        switch (operation.type) {
          case 'add':
            result = await this.addNode(operation.mapId, operation.nodeData, operation.parentId);
            break;
          case 'update':
            result = await this.updateNode(operation.mapId, operation.nodeId, operation.updates);
            break;
          case 'delete':
            result = await this.deleteNode(operation.mapId, operation.nodeId);
            break;
          case 'move':
            result = await this.moveNode(operation.mapId, operation.nodeId, operation.newParentId);
            break;
        }

        if (result?.success) {
          console.log('‚úÖ „É™„Éà„É©„Ç§ÊàêÂäü:', key);
          this.pendingOperations.delete(key);
        }

      } catch (error) {
        console.warn('‚ùå „É™„Éà„É©„Ç§Â§±Êïó:', key, error.message);
        // „É™„Éà„É©„Ç§Â§±Êïó„ÅØ‰øùÊåÅÔºàÊ¨°ÂõûÂÜçË©¶Ë°åÔºâ
      }
    }
  }

  // ÂêåÊúüÁä∂ÊÖã„ÅÆÂèñÂæó
  getSyncStatus() {
    return {
      isEnabled: this.isEnabled,
      pendingCount: this.pendingOperations.size,
      isOnline: navigator.onLine,
      lastSync: this.lastSyncTime || null
    };
  }
}

// „Ç∑„É≥„Ç∞„É´„Éà„É≥„Ç§„É≥„Çπ„Çø„É≥„Çπ
export const realtimeSync = new RealtimeSync();

// Ëá™ÂãïÂàùÊúüÂåñ
realtimeSync.initialize();

// ÂÆöÊúüÁöÑ„Å™„É™„Éà„É©„Ç§Ôºà30ÁßíÈñìÈöîÔºâ
setInterval(() => {
  if (realtimeSync.isEnabled && navigator.onLine) {
    realtimeSync.retryPendingOperations();
  }
}, 30000);